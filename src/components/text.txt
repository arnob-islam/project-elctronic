import React from "react";
import { Link } from 'react-router-dom';

import Hart from './svg/Hart';
import Bag from './svg/Bag';


const SingleProduct = ({ image_url, name, price, former_price }) => {
    return (
        <>
            <div className="single__product__wrapper">
                <Link to='/' className="single__products__body">
                    <div className="singe__products__image">
                        <img src={image_url} className="img-fluid" alt={name} />
                    </div>
                    <div className="single__carts__container">
                        <div className="cart__wrapper">
                            <button className='add__to__cart' onClick={() => console.log('you click on add cart')}>
                                <Bag />
                            </button>
                            <button className='add__to__wishlist' onClick={() => console.log('you click on add Wishlist')}>
                                <Hart />
                            </button>
                        </div>
                    </div>
                    <div className="products__price__name">
                        <span> {name} </span>
                        <del>$ {former_price}</del>
                        <h6>$ {price}</h6>
                    </div>
                </Link>

            </div>
        </>
    );
};

export default SingleProduct;



































          <div className="container">
                <div className={inputDivClass}>
                    <h4>Top product of the month</h4>
                    <form>
                        <input type="text" name="" id="searc__product__fild" placeholder='search...' />
                        <button className="btn_search_products">search</button>
                    </form>

                </div>
                <div className="row">
                    {newSelectedProducts.map(thatItem => {
                        return (
                            <SingleProduct key={thatItem.id} {...thatItem} />
                        )
                    })}
                </div>
            </div>





















import React, { useState, createContext, useContext, useEffect, useReducer, useCallback } from "react";
import Reducer from './Reducer';
import { ADD_TO_CART_LIST, ADD_TO_CART_WISHLIST, REMOVE_SINGLE_ITEM, INCREACE_QUANTITY } from './Typed';

const ContextProvider = createContext();

const initialState = {
  // showCart: false,
  // showWish: false,
  cartItem: [],
  wishItem: [],
  totalPrice: 0,
  amount: 0
}


const Contex = ({ children }) => {
  const [dislayLoading, setDislayLoading] = useState(true);

  const [productItems, setProductItems] = useState([]);


  const [CartState, dispatch] = useReducer(Reducer, initialState)

  const ADD_TO_CART = useCallback((id) => {
    dispatch({ type: ADD_TO_CART_LIST, payload: id })
  }, [CartState.cartItem])


  const ADD_TO_WISH = (id) => {
    dispatch({ type: ADD_TO_CART_WISHLIST, payload: id })
  }


  const REMOVE_ITEM_FROM_CART = (id) => {
    dispatch({ type: REMOVE_SINGLE_ITEM, payload: id })
  }

  const INCREACE_SINGLE_ITEM = (id) => {
    dispatch({ type: INCREACE_QUANTITY, payload: id })
  }


  // useEffect(() => {
  //   dispatch({ type: SET_TOTAL_PRICE })

  // }, [CartState.cartItem])





  const url = `https://previewux.github.io/project-data-electronics/`;

  const dataFetching = async () => {
    setDislayLoading(true);
    try {
      const response = await fetch(url);
      const data = await response.json();
      setProductItems(data)
      setDislayLoading(false);
    } catch (resp) {
      setDislayLoading(true);
      console.log('something is very wrong');
    }

  };

  useEffect(() => {
    dataFetching();
  }, []);

  return (
    <ContextProvider.Provider value={{
      productItems, dislayLoading, ...CartState, ADD_TO_CART, ADD_TO_WISH, REMOVE_ITEM_FROM_CART, INCREACE_SINGLE_ITEM
    }}>
      {children}
    </ContextProvider.Provider>
  );
};

export const UseContextGlobally = () => {
  return useContext(ContextProvider);
};

export default Contex;


   const UserCarts = productItems.filter(function (products) {
        return cartItem.some(function (cart) {
            return products.id == cart.payload;
        });
    })


















        <div className="row">
                    {SpacifiItems.map(item => {
                        console.log(SpacifiItems.length);
                        const { id, image_url, name, price, former_price } = item
                        return (
                            <div className="single__product__wrapper" key={id}>
                                <Link to='/' className="single__products__body">
                                    <div className="singe__products__image">
                                        <img src={image_url} className="img-fluid" alt={name} />
                                    </div>
                                    <div className="single__carts__container">
                                        <div className="cart__wrapper">
                                            <button className='add__to__cart' onClick={() => console.log('you click on add cart')}>
                                                <Bag />
                                            </button>
                                            <button className='add__to__wishlist' onClick={() => console.log('you click on add Wishlist')}>
                                                <Hart />
                                            </button>
                                        </div>
                                    </div>
                                    <div className="products__price__name">
                                        <span> {name} </span>
                                        <del>$ {former_price}</del>
                                        <h6>$ {price}</h6>
                                    </div>
                                </Link>
                            </div>
                        )
                    })}

                </div>

















                 // function setupScroolBar() {
    //     const scrollHeight = window.pageYOffset;
    //     let navHeight = navRef.current.getBoundingClientRect().height;
    //     navHeight = navHeight
    //     if (scrollHeight > navHeight) {
    //         setNavber(true)
    //     } else {
    //         setNavber(false)
    //     }
    // }

    // useEffect(() => {
    //     window.addEventListener("scroll", setupScroolBar)
    //     return () => {
    //         window.removeEventListener("scroll", setupScroolBar)
    //     }
    // }, [navbar])


























    import React, { useEffect } from "react";
import { Link } from 'react-router-dom';
import { UseContextGlobally } from './contex';
import { ADD_TO_CART_LIST, ADD_TO_CART_WISHLIST } from './Typed';

import Hart from './svg/Hart';
import Bag from './svg/Bag';


const SingleProduct = ({ SpacificProducts, DivTitle }) => {

    const { ADD_TO_CART, ADD_TO_WISH } = UseContextGlobally()

    const [InputValue, setInputValue] = React.useState('')
    const [SpacifiItems, setSpacifiItems] = React.useState(SpacificProducts)



    const input__fild = React.useRef()

    const HandeSubmitInput = () => {
        setInputValue(input__fild.current.value)
    }
    useEffect(() => {
        if (InputValue) {
            const produchSercth = (searchValue, Products) => {
                return Products.filter(e => {
                    const regex = new RegExp(searchValue, 'gi')
                    return e.catagory.match(regex) || e.name.match(regex) || e.sub_catagory.match(regex) || e.brand.match(regex)
                })
            }
            setSpacifiItems(produchSercth(InputValue, SpacificProducts))
        }
        if (!InputValue) {
            return setSpacifiItems(SpacificProducts)
        }
    }, [InputValue])

    if (SpacifiItems.length < 1) {
        const IfListIsEmpty = []
        for (let index = 0; index < 10; index++) {
            const onlyPrice = SpacificProducts[index].price
            IfListIsEmpty.push(onlyPrice)
        }

        const unWantedItems = SpacificProducts.filter(e => e.price === Math.min(...IfListIsEmpty))
        return setSpacifiItems(unWantedItems)
    }

    return (
        <>
            <div className="container">
                <div className='d-flex justify-content-between flex-column flex-md-row align-items-center mb-4' >
                    <h4>{DivTitle}</h4>
                    <form onSubmit={(e) => e.preventDefault()}>
                        <input type="text" name="" onChange={HandeSubmitInput} ref={input__fild} id="searc__product__fild" placeholder='search...' />
                        <button className="btn_search_products" type='submit'>search</button>
                    </form>

                </div>
                <div className="row">
                    {SpacifiItems.map(item => {
                        const { id, image_url, name, price, former_price } = item
                        return (
                            <div className="single__product__wrapper" key={id}>
                                <Link to='/' className="single__products__body">
                                    <div className="singe__products__image">
                                        <img src={image_url} className="img-fluid" alt={name} />
                                    </div>
                                    <div className="single__carts__container">
                                        <div className="cart__wrapper">
                                            <button className='add__to__cart' onClick={() => ADD_TO_CART({ type: ADD_TO_CART_LIST, payload: id })}>
                                                <Bag />
                                            </button>

                                            <button className='add__to__wishlist' onClick={() => ADD_TO_WISH({ type: ADD_TO_CART_WISHLIST, payload: id })}>
                                                <Hart />
                                            </button>
                                        </div>
                                    </div>
                                    <div className="products__price__name">
                                        <span> {name} </span>
                                        <del>$ {former_price}</del>
                                        <h6>$ {price}</h6>
                                    </div>
                                </Link>
                            </div>
                        )
                    })}

                </div>
            </div>



        </>

    );
}


import { ADD_TO_CART_LIST, ADD_TO_CART_WISHLIST, SET_TOTAL_PRICE, REMOVE_SINGLE_ITEM, INCREACE_QUANTITY, PRODUCT_SUCCESS } from './Typed';


const Reducer = (state, action) => {
    const { type, payload } = action



    if (type === PRODUCT_SUCCESS) {
        return {
            ...state,
            productItems: action.payload,
            dislayLoading: false

        }
    }


    if (type === ADD_TO_CART_LIST) {
        return {
            ...state,
            cartItem: [...state.cartItem, payload]
        }
    }


    if (type === ADD_TO_CART_WISHLIST) {
        return {
            ...state,
            wishItem: [...state.wishItem, payload]
        }
    }

    // if (type === SET_TOTAL_PRICE) {
    //     console.log('total');
    //     // return {
    //     //     ...state,

    //     //     wishItem: [...state.wishItem, payload]
    //     // }
    // }


    // if (type === INCREACE_QUANTITY) {
    //     const newItem = state.cartItem.map(e => {
    //         if (e.payload === action.payload.payload) {
    //             console.log(e.payload);
    //             // return {
    //             //     ...e,
    //             //     amount: e.amount + 1
    //             // }
    //         }
    //         // return e
    //     })
    //     // return {
    //     //     ...state,
    //     //     amount: newItem
    //     // }
    // }




    if (type === REMOVE_SINGLE_ITEM) {
        const RemainCartItem = state.cartItem.filter(cart => (cart.payload) !== action.payload.payload)
        console.log(RemainCartItem);
        return {
            ...state,
            cartItem: RemainCartItem
        }
    }



    return state
}

export default Reducer





export default SingleProduct;
